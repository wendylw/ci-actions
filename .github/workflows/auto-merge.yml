name: Auto Merge PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
      - review_requested
      - ready_for_review
      - edited
      - reopened
    branches:
      - master
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  pull_request_target:
    types:
      - labeled

# Authorize the workflow to use the write permissions for pull requests and contents
permissions:
  pull-requests: write # gh pr merge --auto need this permission
  contents: write # gh pr merge --auto need this permission

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Check if base branch is master and head branch starts with release
      - name: Check base and head branch
        id: check-branches
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" != "master" ]]; then
            echo "Base branch is not master, skipping merge."
            exit 1
          fi
          if [[ "${{ github.event.pull_request.head.ref }}" != "release"* ]]; then
            echo "Head branch does not start with release, skipping merge."
            exit 1
          fi

      # Step 3: Check if all CI checks have passed
      - name: Check if all CI checks have passed
        run: |
          pr_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} | \
            jq -r '.mergeable')
          if [[ "$pr_status" != "true" ]]; then
            echo "PR has failed CI checks or is not mergeable, skipping merge."
            exit 1
          fi

      # Step 4: Check if all reviews are approved
      - name: Check if all reviews are approved
        run: |
          review_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews)

          echo "Raw review status (JSON):"
          echo "$review_status"

          pending_reviews=$(echo "$review_status" | jq '[.[] | select(.state == "CHANGES_REQUESTED")] | length')
          approved_reviews=$(echo "$review_status" | jq '[.[] | select(.state == "APPROVED")] | length')
          commented_reviews=$(echo "$review_status" | jq '[.[] | select(.state == "COMMENTED")] | length')
          dismissed_reviews=$(echo "$review_status" | jq '[.[] | select(.state == "DISMISSED")] | length')
          total_reviews=$(echo "$review_status" | jq length)

          echo "Total reviews: $total_reviews"
          echo "Approved reviews: $approved_reviews"
          echo "Reviews requesting changes: $pending_reviews"
          echo "Commented reviews: $commented_reviews"
          echo "Dismissed reviews: $dismissed_reviews"

          if [[ "$pending_reviews" -gt 0 ]]; then
            echo "There are pending changes requested."
            exit 1
          fi

          # Ensure the number of approved reviews is at least the total minus those that don't block merge
          non_blocking_reviews=$((commented_reviews + dismissed_reviews))
          required_approvals=$((total_reviews - non_blocking_reviews))

          if [[ "$approved_reviews" -lt "$required_approvals" ]]; then
            echo "Not enough approvals. Required: $required_approvals, Approved: $approved_reviews"
            exit 1
          fi

          echo "All required reviews are approved."

      # Step 5: Check if all requested changes are resolved
      - name: Check if all requested changes are resolved
        run: |
          review_status=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews)
          unresolved_changes=$(echo "$review_status" | jq '[.[] | select(.state == "CHANGES_REQUESTED")] | length')
          if [[ "$unresolved_changes" -gt 0 ]]; then
            echo "There are unresolved changes, skipping merge."
            exit 1
          fi

      # Step 6: Check for merge conflicts
      - name: Check for merge conflicts
        run: |
          pr_mergeable=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} | jq -r '.mergeable')
          if [[ "$pr_mergeable" != "true" ]]; then
            echo "There are merge conflicts, skipping merge."
            exit 1
          fi

      # Step 7: Merge the PR if all conditions are met
      - name: Merge PR
        if: ${{ success() }}
        run: gh pr merge --auto --merge "${{ github.event.pull_request.number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
